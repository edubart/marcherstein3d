require 'mathx'

global vec3 = @record{
  x: number,
  y: number,
  z: number
}
## vec3.value.is_vec3 = true

local is_vec3_or_arithmetic = #[concept(function(b)
  return b.type.is_vec3 or b.type.is_arithmetic
end)]#

function vec3.__add(a: vec3, b: is_vec3_or_arithmetic): vec3 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec3{a.x+b, a.y+b, a.z+b}
  ## else
    return vec3{a.x+b.x, a.y+b.y, a.z+b.z}
  ## end
end

function vec3.__sub(a: vec3, b: is_vec3_or_arithmetic): vec3 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec3{a.x-b, a.y-b, a.z-b}
  ## else
    return vec3{a.x-b.x, a.y-b.y, a.z-b.z}
  ## end
end

function vec3.__mul(a: vec3, b: is_vec3_or_arithmetic): vec3 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    return vec3{a.x*b, a.y*b, a.z*b}
  ## else
    return vec3{a.x*b.x, a.y*b.y, a.z*b.z}
  ## end
end

function vec3.__div(a: vec3, b: is_vec3_or_arithmetic): vec3 <inline,nosideeffect>
  ## if b.type.is_arithmetic then
    local k: number = 1 / b
    return vec3{a.x*k, a.y*k, a.z*k}
  ## else
    return vec3{a.x/b.x, a.y/b.y, a.z/b.z}
  ## end
end

function vec3.__unm(a: vec3): vec3 <inline,nosideeffect>
  return vec3{-a.x, -a.y, -a.z}
end

function vec3.__len(v: vec3): number <inline,nosideeffect>
  return math.sqrt(v.x*v.x + v.y*v.y + v.z*v.z)
end

function vec3.dot(a: vec3, b: vec3): number <inline,nosideeffect>
  return a.x*b.x + a.y*b.y + a.z*b.z
end

function vec3.cross(a: vec3, b: vec3): vec3 <inline,nosideeffect>
  return vec3{a.y*b.z - a.z*b.y, a.z*b.x - a.x*b.z, a.x*b.y - a.y*b.x}
end

function vec3.sqrt(a: vec3): vec3 <inline,nosideeffect>
  return vec3{math.sqrt(a.x), math.sqrt(a.y), math.sqrt(a.z)}
end

function vec3.unit(v: vec3): vec3 <inline,nosideeffect>
  return v / #v
end

function vec3.rotvec(v: vec3, axis: vec3, theta: number): vec3
  local w = vec3.cross(axis, v)
  local sint, cost = math.sin(theta), math.cos(theta)
  local ns = vec3.dot(v, axis) * (1 - cost)
  return axis * ns + w * sint + v * cost
end

function vec3.clamp(v: vec3, min: number, max: number): vec3 <inline,nosideeffect>
  return vec3{math.max(math.min(v.x, max), min),
              math.max(math.min(v.y, max), min),
              math.max(math.min(v.z, max), min)}
end

function vec3.lerp(a: vec3, b: vec3, t: number): vec3 <inline,nosideeffect>
  return a * (1-t) + b * t
end
